package ts

import (
	"bytes"
	"testing"
)

func appendBytes(bs ...[]byte) []byte {
	var buf []byte
	for _, b := range bs {
		buf = append(buf, b...)
	}
	return buf
}

func bx(b []byte, times int) []byte {
	var buf []byte
	for i := 0; i < times; i++ {
		buf = append(buf, b...)
	}
	return buf
}

func TestSyncByte(t *testing.T) {
	// 01000111 00000001 00010001 00110111
	p := Packet{0x47, 0x01, 0x11, 0x37}

	sw := p.SyncByte()
	if sw != SyncByte {
		t.Errorf("got: 0x%x, expected: 0x%x", sw, SyncByte)
	}
}

func TestTransportErrorIndicator(t *testing.T) {
	// 010000111 10000000
	p := Packet{0x47, 0x80}

	tei := p.TransportErrorIndicator()
	if !tei {
		t.Errorf("got: %t, expected: %t", tei, true)
	}

	// 010000111 00000000
	p = Packet{0x47, 0x00}

	tei = p.TransportErrorIndicator()
	if tei {
		t.Errorf("got: %t, expected: %t", tei, false)
	}
}

func TestPayloadUnitStartIndicator(t *testing.T) {
	// 010000111 01000000
	p := Packet{0x47, 0x40}

	tei := p.PayloadUnitStartIndicator()
	if !tei {
		t.Errorf("got: %t, expected: %t", tei, true)
	}

	// 010000111 00000000
	p = Packet{0x47, 0x00}

	tei = p.PayloadUnitStartIndicator()
	if tei {
		t.Errorf("got: %t, expected: %t", tei, false)
	}
}

func TestTransportPriority(t *testing.T) {
	// 010000111 00100000
	p := Packet{0x47, 0x20}

	tei := p.TransportPriority()
	if !tei {
		t.Errorf("got: %t, expected: %t", tei, true)
	}

	// 010000111 00000000
	p = Packet{0x47, 0x00}

	tei = p.TransportPriority()
	if tei {
		t.Errorf("got: %t, expected: %t", tei, false)
	}
}

func TestPID(t *testing.T) {
	// 01000111 00000001 00010001 00110111
	p := Packet{0x47, 0x01, 0x11, 0x37}

	pid := p.PID()
	if pid != PID(0x111) {
		t.Errorf("got: 0x%x, expected: 0x%x", pid, PID(0x111))
	}
}

func TestTransportScramblingControl(t *testing.T) {
	// 01000111 00000001 00010001 00110111
	p := Packet{0x47, 0x01, 0x11, 0x37}

	sc := p.TransportScramblingControl()
	if sc != 0x00 {
		t.Errorf("got: 0x%x, expected: 0x%x", sc, 0x00)
	}

	// 01000111 00000001 00010001 01110111
	p = Packet{0x47, 0x01, 0x11, 0x77}

	sc = p.TransportScramblingControl()
	if sc != 0x01 {
		t.Errorf("got: 0x%x, expected: 0x%x", sc, 0x01)
	}

	// 01000111 00000001 00010001 10110111
	p = Packet{0x47, 0x01, 0x11, 0xb7}

	sc = p.TransportScramblingControl()
	if sc != 0x02 {
		t.Errorf("got: 0x%x, expected: 0x%x", sc, 0x02)
	}

	// 01000111 00000001 00010001 11110111
	p = Packet{0x47, 0x01, 0x11, 0xf7}

	sc = p.TransportScramblingControl()
	if sc != 0x03 {
		t.Errorf("got: 0x%x, expected: 0x%x", sc, 0x03)
	}
}

func TestAdaptationFieldControl(t *testing.T) {
	reserved := byte(0x00)             // 00
	payloadOnly := byte(0x01)          // 01
	adaptationOnly := byte(0x02)       // 10
	adaptationAndPayload := byte(0x03) // 11

	// 01000111 00000001 00010001 00000000
	p := Packet{0x47, 0x01, 0x11, 0x00}
	ctrl := p.AdaptationFieldControl()
	if ctrl != reserved {
		t.Errorf("got: %X, expected: %X", ctrl, reserved)
	}

	// 01000111 00000001 00010001 00010000
	p = Packet{0x47, 0x01, 0x11, 0x10}
	ctrl = p.AdaptationFieldControl()
	if ctrl != payloadOnly {
		t.Errorf("got: %X, expected: %X", ctrl, payloadOnly)
	}

	// 01000111 00000001 00010001 00100000
	p = Packet{0x47, 0x01, 0x11, 0x20}
	ctrl = p.AdaptationFieldControl()
	if ctrl != adaptationOnly {
		t.Errorf("got: %X, expected: %X", ctrl, adaptationOnly)
	}

	// 01000111 00000001 00010001 00110000
	p = Packet{0x47, 0x01, 0x11, 0x30}
	ctrl = p.AdaptationFieldControl()
	if ctrl != adaptationAndPayload {
		t.Errorf("got: %X, expected: %X", ctrl, adaptationAndPayload)
	}
}

func TestAdaptationFieldFlag(t *testing.T) {
	// 01000111 00000001 00010001 00000000
	p := Packet{0x47, 0x01, 0x11, 0x00}
	flg := p.AdaptationFieldFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 01000111 00000001 00010001 00010000
	p = Packet{0x47, 0x01, 0x11, 0x10}
	flg = p.AdaptationFieldFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 01000111 00000001 00010001 00100000
	p = Packet{0x47, 0x01, 0x11, 0x20}
	flg = p.AdaptationFieldFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}

	// 01000111 00000001 00010001 00110000
	p = Packet{0x47, 0x01, 0x11, 0x30}
	flg = p.AdaptationFieldFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}
}

func TestPayloadFlag(t *testing.T) {
	// 01000111 00000001 00010001 00000000
	p := Packet{0x47, 0x01, 0x11, 0x00}
	flg := p.PayloadFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 01000111 00000001 00010001 00010000
	p = Packet{0x47, 0x01, 0x11, 0x10}
	flg = p.PayloadFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}

	// 01000111 00000001 00010001 00100000
	p = Packet{0x47, 0x01, 0x11, 0x20}
	flg = p.PayloadFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 01000111 00000001 00010001 00110000
	p = Packet{0x47, 0x01, 0x11, 0x30}
	flg = p.PayloadFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}
}

func TestContinuityCounter(t *testing.T) {
	// 01000111 00000001 00010001 00110111
	p := Packet{0x47, 0x01, 0x11, 0x37}

	cc := p.ContinuityCounter()
	if cc != 7 {
		t.Errorf("got: %d, expected: %d", cc, 7)
	}
}

func TestAdaptationFieldLength(t *testing.T) {
	// 01000111 00000001 00010001 00110111 00000001 00100000 11100000 01110010
	p := Packet{0x47, 0x01, 0x11, 0x37, 0x01, 0x20, 0xE0, 0x72}

	afLen := p.AdaptationFieldLength()
	if afLen != 1 {
		t.Errorf("got: %d, expected: %d", afLen, 1)
	}
}

func TestAdaptationField(t *testing.T) {
	// 01000111 00000001 00010001 00110111
	p := Packet{0x47, 0x01, 0x11, 0x37,
		// 10110111 00010000 01111010 00110100 00001111 00010100 01111110 01111000 11111111...
		0xB7, 0x10, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}
	expected := AdaptationField{
		// 10110111 00010000 01111010 00110100 00001111 00010100 01111110 01111000 11111111...
		0xB7, 0x10, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}

	af := p.AdaptationField()
	t.Logf("PID: 0x%X", p.PID())
	if bytes.Compare(af, expected) != 0 {
		t.Errorf("got: 0x%0X, expected: 0x%X", af, expected)
	}
}

func TestPacketSample(t *testing.T) {
	p := Packet{
		0x47, 0x01, 0x11, 0x32, 0x01, 0x20, 0xA0, 0xCC, 0x80, 0x44, 0x00, 0x44, 0x23, 0x34, 0xAA, 0x4A, 0xBB, 0x00, 0xBA, 0xFB, 0x40, 0x2E, 0xC9, 0xD8, 0xCC, 0xF9, 0x44, 0x5B, 0x39, 0x34, 0x35, 0x21, 0x80, 0x53, 0x64, 0x62, 0xCB, 0x2D, 0x39, 0x08, 0x40, 0x55, 0x60, 0x0E, 0x8A, 0x00, 0xA3, 0xF4, 0x7E, 0xC8, 0x3C, 0x5C, 0xA9, 0x18, 0xC7, 0x14, 0x8D, 0xA5, 0x2B, 0xD2, 0x02, 0x72, 0x6A, 0x76, 0xEB, 0x2C, 0xB2, 0xD2, 0x79, 0xA6, 0xD8, 0x80, 0x35, 0x26, 0x96, 0x50, 0xC0, 0x09, 0xCB, 0x4A, 0x7F, 0xF6, 0xE2, 0xFE, 0x26, 0x0D, 0x24, 0x66, 0x73, 0xF5, 0x40, 0x69, 0x60, 0x37, 0x7D, 0x96, 0xA6, 0x38, 0x44, 0x45, 0x6B, 0x84, 0x32, 0x6A, 0xD4, 0x90, 0xDC, 0x9D, 0xF2, 0x70, 0xB6, 0x3E, 0xA8, 0xB6, 0x2C, 0x61, 0x17, 0x4F, 0xD2, 0x06, 0x1D, 0xF3, 0xA1, 0x3D, 0x09, 0x3D, 0xAB, 0x92, 0x93, 0xD8, 0x25, 0x09, 0xDF, 0x1F, 0x38, 0xB6, 0x50, 0x2A, 0x5B, 0x36, 0x52, 0xCC, 0x11, 0xAC, 0xC0, 0x3B, 0x0D, 0x25, 0x29, 0x4E, 0xA3, 0xAE, 0xB9, 0x41, 0xA9, 0x33, 0x90, 0x92, 0x3B, 0x71, 0x7A, 0xA4, 0x98, 0x03, 0xB0, 0xC4, 0x63, 0xC6, 0x27, 0x7D, 0xF4, 0x34, 0xB5, 0x4C, 0xE4, 0x90, 0xD2, 0xFB, 0x7D, 0xB0, 0x4E, 0xB4, 0x90, 0xCB, 0x40, 0x19, 0xEE, 0x5A}

	t.Logf("SyncByte: 0x%X", p.SyncByte())
	t.Logf("TransportErrorIndicator: %t", p.TransportErrorIndicator())
	t.Logf("PayloadUnitStartIndicator: %t", p.PayloadUnitStartIndicator())
	t.Logf("TransportPriority: %t", p.TransportPriority())
	t.Logf("PID: 0x%X", p.PID)
	t.Logf("TransportScramblingControl: %02b", p.TransportScramblingControl())
	t.Logf("AdaptationFieldFlag: %t", p.AdaptationFieldFlag())
	t.Logf("PayloadFlag: %t", p.PayloadFlag())
	t.Logf("ContinuityCounter: %d", p.ContinuityCounter())
	t.Logf("Payload: 0x%X", p.PayloadData())
}

func TestAdaptationFieldAdaptationFieldLength(t *testing.T) {
	// 01000111 00000001 00010001 00110111
	p := Packet{0x47, 0x01, 0x11, 0x37,
		// 10110111 00010000 01111010 00110100 00001111 00010100 01111110 01111000 11111111...
		0xB7, 0x10, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}

	af := p.AdaptationField()
	afLen := af.Length()
	if afLen != 183 {
		t.Errorf("got: %d, expected: %d", afLen, 183)
	}
}

func TestDiscontinuityIndicator(t *testing.T) {
	// 10110111 01111111 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af := AdaptationField{0xB7, 0x7F, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	ind := af.DiscontinuityIndicator()
	if ind {
		t.Errorf("got: %t, expected: %t", ind, false)
	}

	// 10110111 10000000 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af = AdaptationField{0xB7, 0x80, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	ind = af.DiscontinuityIndicator()
	if !ind {
		t.Errorf("got: %t, expected: %t", ind, true)
	}
}

func TestRandomAccessIndicator(t *testing.T) {
	// 10110111 10111111 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af := AdaptationField{0xB7, 0xBF, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	ind := af.RandomAccessIndicator()
	if ind {
		t.Errorf("got: %t, expected: %t", ind, false)
	}

	// 10110111 01000000 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af = AdaptationField{0xB7, 0x40, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	ind = af.RandomAccessIndicator()
	if !ind {
		t.Errorf("got: %t, expected: %t", ind, true)
	}
}

func TestElementaryStreamPriorityIndicator(t *testing.T) {
	// 10110111 11011111 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af := AdaptationField{0xB7, 0xDF, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	ind := af.ElementaryStreamPriorityIndicator()
	if ind {
		t.Errorf("got: %t, expected: %t", ind, false)
	}

	// 10110111 00100000 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af = AdaptationField{0xB7, 0x20, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	ind = af.ElementaryStreamPriorityIndicator()
	if !ind {
		t.Errorf("got: %t, expected: %t", ind, true)
	}
}

func TestPCRFlag(t *testing.T) {
	// 10110111 11101111 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af := AdaptationField{0xB7, 0xEF, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg := af.PCRFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 10110111 00010000 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af = AdaptationField{0xB7, 0x10, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg = af.PCRFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}
}

func TestOPCRFlag(t *testing.T) {
	// 10110111 11110111 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af := AdaptationField{0xB7, 0xF7, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg := af.OPCRFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 10110111 00001000 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af = AdaptationField{0xB7, 0x08, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg = af.OPCRFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}
}

func TestSplicingPointFlag(t *testing.T) {
	// 10110111 11111011 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af := AdaptationField{0xB7, 0xFB, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg := af.SplicingPointFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 10110111 00000100 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af = AdaptationField{0xB7, 0x04, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg = af.SplicingPointFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}
}

func TestTransportPrivateDataFlag(t *testing.T) {
	// 10110111 11111101 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af := AdaptationField{0xB7, 0xFD, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg := af.TransportPrivateDataFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 10110111 00000010 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af = AdaptationField{0xB7, 0x02, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg = af.TransportPrivateDataFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}
}

func TestAdaptationFieldExtensionFlag(t *testing.T) {
	// 10110111 11111110 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af := AdaptationField{0xB7, 0xFE, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg := af.AdaptationFieldExtensionFlag()
	if flg {
		t.Errorf("got: %t, expected: %t", flg, false)
	}

	// 10110111 00000001 01111010 00110100 00001111 00010100 01111110 01111000 11111111
	af = AdaptationField{0xB7, 0x01, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF}

	flg = af.AdaptationFieldExtensionFlag()
	if !flg {
		t.Errorf("got: %t, expected: %t", flg, true)
	}
}

func TestPCR(t *testing.T) {
	// 10110111
	afLen := []byte{0xB7}
	// 01111010 00110100 00001111 00010100 01111110 01111000
	testPCR := []byte{0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78}
	// 11111111
	stuff := []byte{0xFF}

	// 11111110
	pcrOnly := []byte{0xFE}
	af := AdaptationField(appendBytes(afLen, pcrOnly, testPCR, stuff))
	expected := testPCR
	p := af.PCR()
	if bytes.Compare(p, expected) != 0 {
		t.Errorf("got: %X, expected: %X", p, expected)
	}

	// 11101110
	noPCR := []byte{0xEE}
	af = AdaptationField(appendBytes(afLen, noPCR, testPCR, stuff))
	expected = nil
	p = af.PCR()
	if bytes.Compare(p, expected) != 0 {
		t.Errorf("got: %X, expected: %X", p, expected)
	}
}

func TestOPCR(t *testing.T) {
	// 10110111
	afLen := []byte{0xB7}
	// 01111010 00110100 00001111 00010100 01111110 01111000
	testOPCR := []byte{0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78}
	// 11111111
	stuff := []byte{0xFF}

	// 11101110
	opcrOnly := []byte{0xEE}
	af := AdaptationField(appendBytes(afLen, opcrOnly, testOPCR, stuff))
	expected := testOPCR
	o := af.OPCR()
	if bytes.Compare(o, expected) != 0 {
		t.Errorf("got: %X, expected: %X", o, expected)
	}

	// 11111110
	pcrAndOPCR := []byte{0xFE}
	af = AdaptationField(appendBytes(afLen, pcrAndOPCR, bx(stuff, 6), testOPCR))
	expected = testOPCR
	o = af.OPCR()
	if bytes.Compare(o, expected) != 0 {
		t.Errorf("got: %X, expected: %X", o, expected)
	}

	// 11100110
	noPCRNoOPCR := []byte{0xE6}
	af = AdaptationField(appendBytes(afLen, noPCRNoOPCR, testOPCR, stuff))
	expected = nil
	o = af.OPCR()
	if bytes.Compare(o, expected) != 0 {
		t.Errorf("got: %X, expected: %X", o, expected)
	}
}

func TestSpliceCountdown(t *testing.T) {
	// 10110111
	afLen := []byte{0xB7}
	// 1101
	testSC := byte(0xD)
	// 11111111
	stuff := []byte{0xFF}

	// 11100100
	scOnly := []byte{0xE4}
	af := AdaptationField(appendBytes(afLen, scOnly, []byte{testSC}))
	expected := testSC
	sc := af.SpliceCountdown()
	if sc != expected {
		t.Errorf("got: %d, expected: %d", sc, expected)
	}

	// 11110100
	pcrAndSC := []byte{0xF4}
	af = AdaptationField(appendBytes(afLen, pcrAndSC, bx(stuff, 6), []byte{testSC}))
	expected = testSC
	sc = af.SpliceCountdown()
	if sc != expected {
		t.Errorf("got: %d, expected: %d", sc, expected)
	}

	// 11111100
	pcrAndOCRAndSC := []byte{0xFC}
	af = AdaptationField(appendBytes(afLen, pcrAndOCRAndSC, bx(stuff, 12), []byte{testSC}))
	expected = testSC
	sc = af.SpliceCountdown()
	if sc != expected {
		t.Errorf("got: %d, expected: %d", sc, expected)
	}

	// 11111000
	noSC := []byte{0xF8}
	af = AdaptationField(appendBytes(afLen, noSC, bx(stuff, 12)))
	expected = 0
	sc = af.SpliceCountdown()
	if sc != expected {
		t.Errorf("got: %d, expected: %d", sc, expected)
	}
}

func TestTransportPrivateDataLength(t *testing.T) {
	// 10110111
	afLen := []byte{0xB7}
	// 1101
	testLen := byte(0xD)
	// 11111111
	stuff := []byte{0xFF}

	// 11100010
	lenOnly := []byte{0xE2}
	af := AdaptationField(appendBytes(afLen, lenOnly, []byte{testLen}))
	expected := int(testLen)
	tpdLen := af.TransportPrivateDataLength()
	if tpdLen != expected {
		t.Errorf("got: %d, expected: %d", tpdLen, expected)
	}

	// 11110010
	pcrAndLen := []byte{0xF2}
	af = AdaptationField(appendBytes(afLen, pcrAndLen, bx(stuff, 6), []byte{testLen}))
	expected = int(testLen)
	tpdLen = af.TransportPrivateDataLength()
	if tpdLen != expected {
		t.Errorf("got: %d, expected: %d", tpdLen, expected)
	}

	// 11111010
	pcrAndOCRAndLen := []byte{0xFA}
	af = AdaptationField(appendBytes(afLen, pcrAndOCRAndLen, bx(stuff, 12), []byte{testLen}))
	expected = int(testLen)
	tpdLen = af.TransportPrivateDataLength()
	if tpdLen != expected {
		t.Errorf("got: %d, expected: %d", tpdLen, expected)
	}

	// 11111110
	pcrAndOCRAndSCAndLen := []byte{0xFE}
	af = AdaptationField(appendBytes(afLen, pcrAndOCRAndSCAndLen, bx(stuff, 13), []byte{testLen}))
	expected = int(testLen)
	tpdLen = af.TransportPrivateDataLength()
	if tpdLen != expected {
		t.Errorf("got: %d, expected: %d", tpdLen, expected)
	}

	// 11111100
	noLen := []byte{0xFC}
	af = AdaptationField(appendBytes(afLen, noLen, bx(stuff, 13)))
	expected = 0
	tpdLen = af.TransportPrivateDataLength()
	if tpdLen != expected {
		t.Errorf("got: %d, expected: %d", tpdLen, expected)
	}
}

// TODO
// func TestTransportPrivateData(t *testing.T) {}
// func TestAdaptationExtension(t *testing.T) {}
// func TestAdaptationExtensionLength(t *testing.T) {}
// func TestStuffingBytes(t *testing.T) {}

func TestAdaptationFieldSample(t *testing.T) {
	// 10110111 00010000 01111010 00110100 00001111 00010100 01111110 01111000 11111111...
	af := AdaptationField{
		0xB7, 0x10, 0x7A, 0x34, 0x0F, 0x14, 0x7E, 0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}

	t.Logf("Length: %d", af.Length())
	t.Logf("DiscontinuityIndicator: %t", af.DiscontinuityIndicator())
	t.Logf("RandomAccessIndicator: %t", af.RandomAccessIndicator())
	t.Logf("ElementaryStreamPriorityIndicator: %t", af.ElementaryStreamPriorityIndicator())
	t.Logf("PCRFlag: %t", af.PCRFlag())
	t.Logf("OPCRFlag: %t", af.OPCRFlag())
	t.Logf("SplicingPointFlag: %t", af.SplicingPointFlag())
	t.Logf("TransportPrivateDataFlag: %t", af.TransportPrivateDataFlag())
	t.Logf("AdaptationFieldExtensionFlag: %t", af.AdaptationFieldExtensionFlag())
	t.Logf("PCR: 0x%X", af.PCR())
	t.Logf("OPCR: 0x%X", af.OPCR())
	t.Logf("SpliceCountdown: 0x%X", af.SpliceCountdown())
	t.Logf("TransportPrivateDataLength: %d", af.TransportPrivateDataLength())
	t.Logf("TransportPrivateData: 0x%X", af.TransportPrivateData())
	t.Logf("AdaptationExtensionLength: %d", af.AdaptationExtensionLength())
	t.Logf("AdaptationExtension: 0x%X", af.AdaptationExtension())
	t.Logf("StuffingBytes: 0x%X", af.StuffingBytes())
}
